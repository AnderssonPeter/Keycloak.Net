using Flurl.Http.Configuration;
using Keycloak.Net.Models.AttackDetection;
using Keycloak.Net.Models.AuthenticationManagement;
using Keycloak.Net.Models.AuthorizationPermissions;
using Keycloak.Net.Models.AuthorizationResources;
using Keycloak.Net.Models.AuthorizationScopes;
using Keycloak.Net.Models.ClientAttributeCertificate;
using Keycloak.Net.Models.ClientInitialAccess;
using Keycloak.Net.Models.Clients;
using Keycloak.Net.Models.ClientScopes;
using Keycloak.Net.Models.Common;
using Keycloak.Net.Models.Components;
using Keycloak.Net.Models.Groups;
using Keycloak.Net.Models.IdentityProviders;
using Keycloak.Net.Models.Key;
using Keycloak.Net.Models.OpenIDConfiguration;
using Keycloak.Net.Models.ProtocolMappers;
using Keycloak.Net.Models.RealmsAdmin;
using Keycloak.Net.Models.Roles;
using Keycloak.Net.Models.Root;
using Keycloak.Net.Models.Users;
using Keycloak.Net.Models.UserStorageProvider;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace Keycloak.Net.Interfaces
{
    public interface IKeycloakClient
    {
        Task<bool> AddAuthenticationExecutionAsync(string realm, AuthenticationExecution authenticationExecution, CancellationToken cancellationToken = default);
        Task<bool> AddAuthenticationFlowAndExecutionToAuthenticationFlowAsync(string realm, string flowAlias, IDictionary<string, object> dataWithAliasTypeProviderDescription, CancellationToken cancellationToken = default);
        Task<bool> AddAuthenticationFlowExecutionAsync(string realm, string flowAlias, IDictionary<string, object> dataWithProvider, CancellationToken cancellationToken = default);
        Task<bool> AddClientRoleMappingsToGroupAsync(string realm, string groupId, string clientId, IEnumerable<Role> roles, CancellationToken cancellationToken = default);
        Task<bool> AddClientRoleMappingsToUserAsync(string realm, string userId, string clientId, IEnumerable<Role> roles, CancellationToken cancellationToken = default);
        Task<bool> AddClientRolesScopeMappingToClientAsync(string realm, string clientId, string scopeClientId, IEnumerable<Role> roles, CancellationToken cancellationToken = default);
        Task<bool> AddClientRolesToClientScopeAsync(string realm, string clientScopeId, string clientId, IEnumerable<Role> roles, CancellationToken cancellationToken = default);
        Task<bool> AddCompositesToRoleAsync(string realm, string roleName, IEnumerable<Role> roles, CancellationToken cancellationToken = default);
        Task<bool> AddCompositesToRoleAsync(string realm, string clientId, string roleName, IEnumerable<Role> roles, CancellationToken cancellationToken = default);
        Task<bool> AddIdentityProviderMapperAsync(string realm, string identityProviderAlias, IdentityProviderMapper identityProviderMapper, CancellationToken cancellationToken = default);
        Task<bool> AddRealmRoleMappingsToGroupAsync(string realm, string groupId, IEnumerable<Role> roles, CancellationToken cancellationToken = default);
        Task<bool> AddRealmRoleMappingsToUserAsync(string realm, string userId, IEnumerable<Role> roles, CancellationToken cancellationToken = default);
        Task<bool> AddRealmRolesScopeMappingToClientAsync(string realm, string clientId, IEnumerable<Role> roles, CancellationToken cancellationToken = default);
        Task<bool> AddRealmRolesToClientScopeAsync(string realm, string clientScopeId, IEnumerable<Role> roles, CancellationToken cancellationToken = default);
        Task<bool> AddUserSocialLoginProviderAsync(string realm, string userId, string provider, FederatedIdentity federatedIdentity, CancellationToken cancellationToken = default);
        Task<Client> BasePathForImportingClientsAsync(string realm, string description, CancellationToken cancellationToken = default);
        Task<bool> ClearKeysCacheAsync(string realm, CancellationToken cancellationToken = default);
        Task<bool> ClearRealmCacheAsync(string realm, CancellationToken cancellationToken = default);
        Task<bool> ClearUserCacheAsync(string realm, CancellationToken cancellationToken = default);
        Task<bool> ClearUserLoginFailuresAsync(string realm, CancellationToken cancellationToken = default);
        Task<bool> ClearUserLoginFailuresAsync(string realm, string userId, CancellationToken cancellationToken = default);
        Task<bool> CorsPreflightAsync(string realm, CancellationToken cancellationToken = default);
        Task<string> CreateAndRetrieveUserIdAsync(string realm, User user, CancellationToken cancellationToken = default);
        Task<bool> CreateAuthenticationFlowAsync(string realm, AuthenticationFlow authenticationFlow, CancellationToken cancellationToken = default);
        Task<AuthorizationPermission> CreateAuthorizationPermissionAsync(string realm, string clientId, AuthorizationPermission permission, CancellationToken cancellationToken = default);
        Task<bool> CreateAuthorizationScopeAsync(string realm, string resourceServerId, AuthorizationScope scope, CancellationToken cancellationToken = default);
        Task<string> CreateClientAndRetrieveClientIdAsync(string realm, Client client, CancellationToken cancellationToken = default);
        Task<bool> CreateClientAsync(string realm, Client client, CancellationToken cancellationToken = default);
        Task<bool> CreateClientScopeAsync(string realm, ClientScope clientScope, CancellationToken cancellationToken = default);
        Task<bool> CreateComponentAsync(string realm, Component componentRepresentation, CancellationToken cancellationToken = default);
        Task<bool> CreateGroupAsync(string realm, Group group, CancellationToken cancellationToken = default);
        Task<bool> CreateIdentityProviderAsync(string realm, Models.IdentityProviders.IdentityProvider identityProvider, CancellationToken cancellationToken = default);
        Task<ClientInitialAccessPresentation> CreateInitialAccessTokenAsync(string realm, ClientInitialAccessCreatePresentation create, CancellationToken cancellationToken = default);
        Task<bool> CreateMultipleProtocolMappersAsync(string realm, string clientScopeId, IEnumerable<ProtocolMapper> protocolMapperRepresentations, CancellationToken cancellationToken = default);
        Task<bool> CreateProtocolMapperAsync(string realm, string clientScopeId, ProtocolMapper protocolMapperRepresentation, CancellationToken cancellationToken = default);
        Task<bool> CreateResourceAsync(string realm, string resourceServerId, AuthorizationResource resource, CancellationToken cancellationToken = default);
        Task<bool> CreateRoleAsync(string realm, Role role, CancellationToken cancellationToken = default);
        Task<bool> CreateRoleAsync(string realm, string clientId, Role role, CancellationToken cancellationToken = default);
        Task<RolePolicy> CreateRolePolicyAsync(string realm, string clientId, RolePolicy policy, CancellationToken cancellationToken = default);
        Task<bool> CreateUserAsync(string realm, User user, CancellationToken cancellationToken = default);
        Task<bool> DeleteAdminEventsAsync(string realm, CancellationToken cancellationToken = default);
        Task<bool> DeleteAuthenticationExecutionAsync(string realm, string executionId, CancellationToken cancellationToken = default);
        Task<bool> DeleteAuthenticationFlowAsync(string realm, string flowId, CancellationToken cancellationToken = default);
        Task<bool> DeleteAuthenticatorConfigurationAsync(string realm, string configurationId, CancellationToken cancellationToken = default);
        Task<bool> DeleteAuthorizationPermissionAsync(string realm, string clientId, AuthorizationPermissionType permissionType, string permissionId, CancellationToken cancellationToken = default);
        Task<bool> DeleteAuthorizationScopeAsync(string realm, string resourceServerId, string scopeId, CancellationToken cancellationToken = default);
        Task<bool> DeleteClientAsync(string realm, string clientId, CancellationToken cancellationToken = default);
        Task<bool> DeleteClientRoleMappingsFromGroupAsync(string realm, string groupId, string clientId, IEnumerable<Role> roles, CancellationToken cancellationToken = default);
        Task<bool> DeleteClientRoleMappingsFromUserAsync(string realm, string userId, string clientId, IEnumerable<Role> roles, CancellationToken cancellationToken = default);
        Task<bool> DeleteClientScopeAsync(string realm, string clientScopeId, CancellationToken cancellationToken = default);
        Task<bool> DeleteComponentAsync(string realm, string componentId, CancellationToken cancellationToken = default);
        Task<bool> DeleteDefaultClientScopeAsync(string realm, string clientId, string clientScopeId, CancellationToken cancellationToken = default);
        Task<bool> DeleteEventsAsync(string realm, CancellationToken cancellationToken = default);
        Task<bool> DeleteGroupAsync(string realm, string groupId, CancellationToken cancellationToken = default);
        Task<bool> DeleteIdentityProviderAsync(string realm, string identityProviderAlias, CancellationToken cancellationToken = default);
        Task<bool> DeleteIdentityProviderMapperAsync(string realm, string identityProviderAlias, string mapperId, CancellationToken cancellationToken = default);
        Task<bool> DeleteInitialAccessTokenAsync(string realm, string clientInitialAccessTokenId, CancellationToken cancellationToken = default);
        Task<bool> DeleteOptionalClientScopeAsync(string realm, string clientId, string clientScopeId, CancellationToken cancellationToken = default);
        Task<bool> DeleteProtocolMapperAsync(string realm, string clientScopeId, string protocolMapperId, CancellationToken cancellationToken = default);
        Task<bool> DeleteRealmAsync(string realm, CancellationToken cancellationToken = default);
        Task<bool> DeleteRealmDefaultClientScopeAsync(string realm, string clientScopeId, CancellationToken cancellationToken = default);
        Task<bool> DeleteRealmGroupAsync(string realm, string groupId, CancellationToken cancellationToken = default);
        Task<bool> DeleteRealmOptionalClientScopeAsync(string realm, string clientScopeId, CancellationToken cancellationToken = default);
        Task<bool> DeleteRealmRoleMappingsFromGroupAsync(string realm, string groupId, IEnumerable<Role> roles, CancellationToken cancellationToken = default);
        Task<bool> DeleteRealmRoleMappingsFromUserAsync(string realm, string userId, IEnumerable<Role> roles, CancellationToken cancellationToken = default);
        Task<bool> DeleteRequiredActionAsync(string realm, string requiredActionAlias, CancellationToken cancellationToken = default);
        Task<bool> DeleteResourceAsync(string realm, string resourceServerId, string resourceId, CancellationToken cancellationToken = default);
        Task<bool> DeleteRoleByIdAsync(string realm, string roleId, CancellationToken cancellationToken = default);
        Task<bool> DeleteRoleByNameAsync(string realm, string roleName, CancellationToken cancellationToken = default);
        Task<bool> DeleteRoleByNameAsync(string realm, string clientId, string roleName, CancellationToken cancellationToken = default);
        Task<bool> DeleteRolePolicyAsync(string realm, string clientId, PolicyType policyType, string rolePolicyId, CancellationToken cancellationToken = default);
        Task<bool> DeleteUserAsync(string realm, string userId, CancellationToken cancellationToken = default);
        Task<bool> DeleteUserGroupAsync(string realm, string userId, string groupId, CancellationToken cancellationToken = default);
        Task<bool> DeleteUserSessionAsync(string realm, string session, CancellationToken cancellationToken = default);
        Task<bool> DisableUserCredentialsAsync(string realm, string userId, IEnumerable<string> credentialTypes, CancellationToken cancellationToken = default);
        Task<bool> DuplicateAuthenticationFlowAsync(string realm, string flowAlias, string newName, CancellationToken cancellationToken = default);
        Task<bool> ExportIdentityProviderPublicBrokerConfigurationAsync(string realm, string identityProviderAlias, CancellationToken cancellationToken = default);
        Task<byte[]> GenerateCertificateWithNewKeyPairAndGetKeyStoreAsync(string realm, string clientId, string attribute, KeyStoreConfig keyStoreConfig, CancellationToken cancellationToken = default);
        Task<Certificate> GenerateCertificateWithNewKeyPairAsync(string realm, string clientId, string attribute, CancellationToken cancellationToken = default);
        Task<AccessToken> GenerateClientExampleAccessTokenAsync(string realm, string clientId, string scope = null, string userId = null, CancellationToken cancellationToken = default);
        Task<Client> GenerateClientRegistrationAccessTokenAsync(string realm, string clientId, CancellationToken cancellationToken = default);
        Task<Credentials> GenerateClientSecretAsync(string realm, string clientId, CancellationToken cancellationToken = default);
        Task<IEnumerable<AdminEvent>> GetAdminEventsAsync(string realm, string authClient = null, string authIpAddress = null, string authRealm = null, string authUser = null, string dateFrom = null, string dateTo = null, int? first = null, int? max = null, IEnumerable<string> operationTypes = null, string resourcePath = null, IEnumerable<string> resourceTypes = null, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetApplicationRolesForCompositeAsync(string realm, string roleName, string forClientId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetApplicationRolesForCompositeAsync(string realm, string clientId, string roleName, string forClientId, CancellationToken cancellationToken = default);
        Task<AuthenticationExecutionById> GetAuthenticationExecutionAsync(string realm, string executionId, CancellationToken cancellationToken = default);
        Task<AuthenticationFlow> GetAuthenticationFlowByIdAsync(string realm, string flowId, CancellationToken cancellationToken = default);
        Task<IEnumerable<AuthenticationFlowExecution>> GetAuthenticationFlowExecutionsAsync(string realm, string flowAlias, CancellationToken cancellationToken = default);
        Task<IEnumerable<AuthenticationFlow>> GetAuthenticationFlowsAsync(string realm, CancellationToken cancellationToken = default);
        Task<AuthenticatorConfig> GetAuthenticatorConfigurationAsync(string realm, string configurationId, CancellationToken cancellationToken = default);
        Task<AuthenticatorConfigInfo> GetAuthenticatorProviderConfigurationDescriptionAsync(string realm, string providerId, CancellationToken cancellationToken = default);
        Task<IEnumerable<IDictionary<string, object>>> GetAuthenticatorProvidersAsync(string realm, CancellationToken cancellationToken = default);
        Task<IEnumerable<Models.Clients.Policy>> GetAuthorizationPermissionAssociatedPoliciesAsync(string realm, string clientId, string permissionId, CancellationToken cancellationToken = default);
        Task<IEnumerable<AuthorizationResource>> GetAuthorizationPermissionAssociatedResourcesAsync(string realm, string clientId, string permissionId, CancellationToken cancellationToken = default);
        Task<IEnumerable<AuthorizationScope>> GetAuthorizationPermissionAssociatedScopesAsync(string realm, string clientId, string permissionId, CancellationToken cancellationToken = default);
        Task<AuthorizationPermission> GetAuthorizationPermissionByIdAsync(string realm, string clientId, AuthorizationPermissionType permissionType, string permissionId, CancellationToken cancellationToken = default);
        Task<IEnumerable<AuthorizationPermission>> GetAuthorizationPermissionsAsync(string realm, string clientId, AuthorizationPermissionType? ofPermissionType = null, int? first = null, int? max = null, string name = null, string resource = null, string scope = null, CancellationToken cancellationToken = default);
        Task<IEnumerable<Models.Clients.Policy>> GetAuthorizationPoliciesAsync(string realm, string clientId, int? first = null, int? max = null, string name = null, string resource = null, string scope = null, bool? permission = null, CancellationToken cancellationToken = default);
        Task<AuthorizationScope> GetAuthorizationScopeAsync(string realm, string resourceServerId, string scopeId, CancellationToken cancellationToken = default);
        Task<IEnumerable<AuthorizationScope>> GetAuthorizationScopesAsync(string realm, string resourceServerId = null, bool deep = false, int? first = null, int? max = null, string name = null, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetAvailableClientRoleMappingsForGroupAsync(string realm, string groupId, string clientId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetAvailableClientRoleMappingsForUserAsync(string realm, string userId, string clientId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetAvailableClientRolesForClientScopeAsync(string realm, string clientScopeId, string clientId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetAvailableClientRolesForClientScopeForClientAsync(string realm, string clientId, string scopeClientId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetAvailableRealmRoleMappingsForGroupAsync(string realm, string groupId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetAvailableRealmRoleMappingsForUserAsync(string realm, string userId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetAvailableRealmRolesForClientScopeAsync(string realm, string clientScopeId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetAvailableRealmRolesForClientScopeForClientAsync(string realm, string clientId, CancellationToken cancellationToken = default);
        Task<Client> GetClientAsync(string realm, string clientId, CancellationToken cancellationToken = default);
        Task<IEnumerable<IDictionary<string, object>>> GetClientAuthenticatorProvidersAsync(string realm, CancellationToken cancellationToken = default);
        Task<ManagementPermission> GetClientAuthorizationPermissionsInitializedAsync(string realm, string clientId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetClientGrantedScopeMappingsAsync(string realm, string clientId, string roleContainerId, string scope = null, CancellationToken cancellationToken = default);
        Task<IEnumerable<ClientInitialAccessPresentation>> GetClientInitialAccessAsync(string realm, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetClientNotGrantedScopeMappingsAsync(string realm, string clientId, string roleContainerId, string scope = null, CancellationToken cancellationToken = default);
        Task<int> GetClientOfflineSessionCountAsync(string realm, string clientId, CancellationToken cancellationToken = default);
        Task<IEnumerable<UserSession>> GetClientOfflineSessionsAsync(string realm, string clientId, int? first = null, int? max = null, CancellationToken cancellationToken = default);
        Task<string> GetClientProviderAsync(string realm, string clientId, string providerId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetClientRoleMappingsForGroupAsync(string realm, string groupId, string clientId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetClientRoleMappingsForUserAsync(string realm, string userId, string clientId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetClientRolesForClientScopeAsync(string realm, string clientScopeId, string clientId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetClientRolesForCompositeByIdAsync(string realm, string roleId, string clientId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetClientRolesScopeMappingsForClientAsync(string realm, string clientId, string scopeClientId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Client>> GetClientsAsync(string realm, string clientId = null, bool? viewableOnly = null, CancellationToken cancellationToken = default);
        Task<ClientScope> GetClientScopeAsync(string realm, string clientScopeId, CancellationToken cancellationToken = default);
        Task<IEnumerable<ClientScope>> GetClientScopesAsync(string realm, CancellationToken cancellationToken = default);
        Task<Credentials> GetClientSecretAsync(string realm, string clientId, CancellationToken cancellationToken = default);
        Task<int> GetClientSessionCountAsync(string realm, string clientId, CancellationToken cancellationToken = default);
        Task<IEnumerable<IDictionary<string, object>>> GetClientSessionStatsAsync(string realm, CancellationToken cancellationToken = default);
        Task<IEnumerable<UserSession>> GetClientUserSessionsAsync(string realm, string clientId, int? first = null, int? max = null, CancellationToken cancellationToken = default);
        Task<Component> GetComponentAsync(string realm, string componentId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Component>> GetComponentsAsync(string realm, string name = null, string parent = null, string type = null, CancellationToken cancellationToken = default);
        Task<IDictionary<string, object>> GetConfigurationDescriptionsForAllClientsAsync(string realm, CancellationToken cancellationToken = default);
        Task<IEnumerable<ClientScope>> GetDefaultClientScopesAsync(string realm, string clientId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetEffectiveClientRoleMappingsForGroupAsync(string realm, string groupId, string clientId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetEffectiveClientRoleMappingsForUserAsync(string realm, string userId, string clientId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetEffectiveClientRolesForClientScopeAsync(string realm, string clientScopeId, string clientId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetEffectiveClientRolesForClientScopeForClientAsync(string realm, string clientId, string scopeClientId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetEffectiveRealmRoleMappingsForGroupAsync(string realm, string groupId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetEffectiveRealmRoleMappingsForUserAsync(string realm, string userId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetEffectiveRealmRolesForClientScopeAsync(string realm, string clientScopeId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetEffectiveRealmRolesForClientScopeForClientAsync(string realm, string clientId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Event>> GetEventsAsync(string realm, string client = null, string dateFrom = null, string dateTo = null, int? first = null, string ipAddress = null, int? max = null, string type = null, string user = null, CancellationToken cancellationToken = default);
        Task<IEnumerable<IDictionary<string, object>>> GetFormActionProvidersAsync(string realm, CancellationToken cancellationToken = default);
        Task<IEnumerable<IDictionary<string, object>>> GetFormProvidersAsync(string realm, CancellationToken cancellationToken = default);
        Task<Group> GetGroupAsync(string realm, string groupId, CancellationToken cancellationToken = default);
        Task<ManagementPermission> GetGroupClientAuthorizationPermissionsInitializedAsync(string realm, string groupId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Group>> GetGroupHierarchyAsync(string realm, int? first = null, int? max = null, string search = null, CancellationToken cancellationToken = default);
        Task<int> GetGroupsCountAsync(string realm, string search = null, bool? top = null, CancellationToken cancellationToken = default);
        Task<IEnumerable<Group>> GetGroupsWithRoleNameAsync(string realm, string roleName, int? first = null, bool? full = null, int? max = null, CancellationToken cancellationToken = default);
        Task<IEnumerable<Group>> GetGroupsWithRoleNameAsync(string realm, string clientId, string roleName, int? first = null, bool? full = null, int? max = null, CancellationToken cancellationToken = default);
        Task<IEnumerable<User>> GetGroupUsersAsync(string realm, string groupId, int? first = null, int? max = null, CancellationToken cancellationToken = default);
        Task<Models.IdentityProviders.IdentityProvider> GetIdentityProviderAsync(string realm, string identityProviderAlias, CancellationToken cancellationToken = default);
        Task<ManagementPermission> GetIdentityProviderAuthorizationPermissionsInitializedAsync(string realm, string identityProviderAlias, CancellationToken cancellationToken = default);
        Task<IdentityProviderInfo> GetIdentityProviderByProviderIdAsync(string realm, string providerId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Models.IdentityProviders.IdentityProvider>> GetIdentityProviderInstancesAsync(string realm, CancellationToken cancellationToken = default);
        Task<IdentityProviderMapper> GetIdentityProviderMapperByIdAsync(string realm, string identityProviderAlias, string mapperId, CancellationToken cancellationToken = default);
        Task<IEnumerable<IdentityProviderMapper>> GetIdentityProviderMappersAsync(string realm, string identityProviderAlias, CancellationToken cancellationToken = default);
        Task<IDictionary<string, object>> GetIdentityProviderMapperTypesAsync(string realm, string identityProviderAlias, CancellationToken cancellationToken = default);
        Task<IdentityProviderToken> GetIdentityProviderTokenAsync(string realm, string identityProviderAlias, CancellationToken cancellationToken = default);
        Task<Certificate> GetKeyInfoAsync(string realm, string clientId, string attribute, CancellationToken cancellationToken = default);
        Task<KeysMetadata> GetKeysAsync(string realm, CancellationToken cancellationToken = default);
        Task<byte[]> GetKeyStoreForClientAsync(string realm, string clientId, string attribute, KeyStoreConfig keyStoreConfig, CancellationToken cancellationToken = default);
        Task<OpenIDConfiguration> GetOpenIDConfigurationAsync(string realm, CancellationToken cancellationToken = default);
        Task<IEnumerable<ClientScope>> GetOptionalClientScopesAsync(string realm, string clientId, CancellationToken cancellationToken = default);
        Task<ProtocolMapper> GetProtocolMapperAsync(string realm, string clientScopeId, string protocolMapperId, CancellationToken cancellationToken = default);
        Task<IEnumerable<ProtocolMapper>> GetProtocolMappersAsync(string realm, string clientScopeId, CancellationToken cancellationToken = default);
        Task<IEnumerable<ProtocolMapper>> GetProtocolMappersByNameAsync(string realm, string clientScopeId, string protocol, CancellationToken cancellationToken = default);
        Task<IEnumerable<ClientScopeEvaluateResourceProtocolMapperEvaluation>> GetProtocolMappersInTokenGenerationAsync(string realm, string clientId, string scope = null, CancellationToken cancellationToken = default);
        Task<Realm> GetRealmAsync(string realm, CancellationToken cancellationToken = default);
        Task<IEnumerable<ClientScope>> GetRealmDefaultClientScopesAsync(string realm, CancellationToken cancellationToken = default);
        Task<RealmEventsConfig> GetRealmEventsProviderConfigurationAsync(string realm, CancellationToken cancellationToken = default);
        Task<Group> GetRealmGroupByPathAsync(string realm, string path, CancellationToken cancellationToken = default);
        Task<IEnumerable<Group>> GetRealmGroupHierarchyAsync(string realm, CancellationToken cancellationToken = default);
        Task<IEnumerable<ClientScope>> GetRealmOptionalClientScopesAsync(string realm, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetRealmRoleMappingsForGroupAsync(string realm, string groupId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetRealmRoleMappingsForUserAsync(string realm, string userId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetRealmRolesForClientScopeAsync(string realm, string clientScopeId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetRealmRolesForCompositeAsync(string realm, string roleName, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetRealmRolesForCompositeAsync(string realm, string clientId, string roleName, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetRealmRolesForCompositeByIdAsync(string realm, string roleId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetRealmRolesScopeMappingsForClientAsync(string realm, string clientId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Realm>> GetRealmsAsync(string realm, CancellationToken cancellationToken = default);
        Task<ManagementPermission> GetRealmUsersManagementPermissionsAsync(string realm, CancellationToken cancellationToken = default);
        Task<RequiredActionProvider> GetRequiredActionByAliasAsync(string realm, string requiredActionAlias, CancellationToken cancellationToken = default);
        Task<IEnumerable<RequiredActionProvider>> GetRequiredActionsAsync(string realm, CancellationToken cancellationToken = default);
        Task<AuthorizationResource> GetResourceAsync(string realm, string resourceServerId, string resourceId, CancellationToken cancellationToken = default);
        Task<IEnumerable<AuthorizationResource>> GetResourcesAsync(string realm, string resourceServerId = null, bool deep = false, int? first = null, int? max = null, string name = null, string owner = null, string type = null, string uri = null, CancellationToken cancellationToken = default);
        Task<IEnumerable<Resource>> GetResourcesOwnedByClientAsync(string realm, string clientId, CancellationToken cancellationToken = default);
        Task<IEnumerable<ComponentType>> GetRetrieveProvidersBasePathAsync(string realm, CancellationToken cancellationToken = default);
        Task<ManagementPermission> GetRoleAuthorizationPermissionsInitializedAsync(string realm, string roleName, CancellationToken cancellationToken = default);
        Task<ManagementPermission> GetRoleAuthorizationPermissionsInitializedAsync(string realm, string clientId, string roleName, CancellationToken cancellationToken = default);
        Task<Role> GetRoleByIdAsync(string realm, string roleId, CancellationToken cancellationToken = default);
        Task<ManagementPermission> GetRoleByIdAuthorizationPermissionsInitializedAsync(string realm, string roleId, CancellationToken cancellationToken = default);
        Task<Role> GetRoleByNameAsync(string realm, string roleName, CancellationToken cancellationToken = default);
        Task<Role> GetRoleByNameAsync(string realm, string clientId, string roleName, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetRoleChildrenAsync(string realm, string roleId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetRoleCompositesAsync(string realm, string roleName, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetRoleCompositesAsync(string realm, string clientId, string roleName, CancellationToken cancellationToken = default);
        Task<Mapping> GetRoleMappingsForGroupAsync(string realm, string groupId, CancellationToken cancellationToken = default);
        Task<Mapping> GetRoleMappingsForUserAsync(string realm, string userId, CancellationToken cancellationToken = default);
        Task<IEnumerable<RolePolicy>> GetRolePoliciesAsync(string realm, string clientId, int? first = null, int? max = null, string name = null, string resource = null, string scope = null, bool? permission = null, CancellationToken cancellationToken = default);
        Task<RolePolicy> GetRolePolicyByIdAsync(string realm, string clientId, PolicyType policyType, string rolePolicyId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetRolesAsync(string realm, int? first = null, int? max = null, string search = null, CancellationToken cancellationToken = default);
        Task<IEnumerable<Role>> GetRolesAsync(string realm, string clientId, int? first = null, int? max = null, string search = null, CancellationToken cancellationToken = default);
        Task<Mapping> GetScopeMappingsAsync(string realm, string clientScopeId, CancellationToken cancellationToken = default);
        Task<Mapping> GetScopeMappingsForClientAsync(string realm, string clientId, CancellationToken cancellationToken = default);
        Task<ServerInfo> GetServerInfoAsync(string realm, CancellationToken cancellationToken = default);
        Task<IEnumerable<ComponentType>> GetSubcomponentTypesAsync(string realm, string componentId, string type = null, CancellationToken cancellationToken = default);
        Task<IEnumerable<IDictionary<string, object>>> GetUnregisteredRequiredActionsAsync(string realm, CancellationToken cancellationToken = default);
        Task<User> GetUserAsync(string realm, string userId, CancellationToken cancellationToken = default);
        Task<string> GetUserConsentsAsync(string realm, string userId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Credentials>> GetUserCredentialsAsync(string realm, string userId, CancellationToken cancellationToken = default);
        Task<User> GetUserForServiceAccountAsync(string realm, string clientId, CancellationToken cancellationToken = default);
        Task<IEnumerable<Group>> GetUserGroupsAsync(string realm, string userId, CancellationToken cancellationToken = default);
        Task<int> GetUserGroupsCountAsync(string realm, string userId, CancellationToken cancellationToken = default);
        Task<UserNameStatus> GetUserNameStatusInBruteForceDetectionAsync(string realm, string userId, CancellationToken cancellationToken = default);
        Task<IEnumerable<UserSession>> GetUserOfflineSessionsAsync(string realm, string userId, string clientId, CancellationToken cancellationToken = default);
        Task<IEnumerable<User>> GetUsersAsync(string realm, bool? briefRepresentation = null, string email = null, bool? emailVerified = null, bool? enabled = null, bool? exact = null, int? first = null, string firstName = null, string idpAlias = null, string idpUserId = null, string lastName = null, int? max = null, string q = null, string search = null, string username = null, CancellationToken cancellationToken = default);
        Task<int> GetUsersCountAsync(string realm, CancellationToken cancellationToken = default);
        Task<IEnumerable<UserSession>> GetUserSessionsAsync(string realm, string userId, CancellationToken cancellationToken = default);
        Task<IEnumerable<FederatedIdentity>> GetUserSocialLoginsAsync(string realm, string userId, CancellationToken cancellationToken = default);
        Task<IEnumerable<User>> GetUsersWithRoleNameAsync(string realm, string roleName, int? first = null, int? max = null, CancellationToken cancellationToken = default);
        Task<IEnumerable<User>> GetUsersWithRoleNameAsync(string realm, string clientId, string roleName, int? first = null, int? max = null, CancellationToken cancellationToken = default);
        Task<IDictionary<string, object>> ImpersonateUserAsync(string realm, string userId, CancellationToken cancellationToken = default);
        Task<IDictionary<string, object>> ImportIdentityProviderAsync(string realm, string input, CancellationToken cancellationToken = default);
        Task<bool> ImportRealmAsync(string realm, Realm rep, CancellationToken cancellationToken = default);
        Task<bool> LowerAuthenticationExecutionPriorityAsync(string realm, string executionId, CancellationToken cancellationToken = default);
        Task<bool> LowerRequiredActionPriorityAsync(string realm, string requiredActionAlias, CancellationToken cancellationToken = default);
        Task<bool> MakeRoleCompositeAsync(string realm, string roleId, IEnumerable<Role> roles, CancellationToken cancellationToken = default);
        Task<GlobalRequestResult> PushClientRevocationPolicyAsync(string realm, string clientId, CancellationToken cancellationToken = default);
        Task<GlobalRequestResult> PushRealmRevocationPolicyAsync(string realm, CancellationToken cancellationToken = default);
        Task<bool> RaiseAuthenticationExecutionPriorityAsync(string realm, string executionId, CancellationToken cancellationToken = default);
        Task<bool> RaiseRequiredActionPriorityAsync(string realm, string requiredActionAlias, CancellationToken cancellationToken = default);
        Task<Realm> RealmPartialExportAsync(string realm, bool? exportClients = null, bool? exportGroupsAndRoles = null, CancellationToken cancellationToken = default);
        Task<bool> RealmPartialImportAsync(string realm, PartialImport rep, CancellationToken cancellationToken = default);
        Task<bool> RegisterClientClusterNodeAsync(string realm, string clientId, IDictionary<string, object> formParams, CancellationToken cancellationToken = default);
        Task<bool> RegisterRequiredActionAsync(string realm, IDictionary<string, object> dataWithProviderIdName, CancellationToken cancellationToken = default);
        Task<bool> RemoveClientRolesFromClientScopeAsync(string realm, string clientScopeId, string clientId, IEnumerable<Role> roles, CancellationToken cancellationToken = default);
        Task<bool> RemoveClientRolesFromClientScopeForClientAsync(string realm, string clientId, string scopeClientId, IEnumerable<Role> roles, CancellationToken cancellationToken = default);
        Task<bool> RemoveCompositesFromRoleAsync(string realm, string roleName, IEnumerable<Role> roles, CancellationToken cancellationToken = default);
        Task<bool> RemoveCompositesFromRoleAsync(string realm, string clientId, string roleName, IEnumerable<Role> roles, CancellationToken cancellationToken = default);
        Task<bool> RemoveImportedUsersAsync(string realm, string storageProviderId, CancellationToken cancellationToken = default);
        Task<bool> RemoveRealmRolesFromClientScopeAsync(string realm, string clientScopeId, IEnumerable<Role> roles, CancellationToken cancellationToken = default);
        Task<bool> RemoveRealmRolesFromClientScopeForClientAsync(string realm, string clientId, IEnumerable<Role> roles, CancellationToken cancellationToken = default);
        Task<bool> RemoveRolesFromCompositeAsync(string realm, string roleId, IEnumerable<Role> roles, CancellationToken cancellationToken = default);
        Task<GlobalRequestResult> RemoveUserSessionsAsync(string realm, CancellationToken cancellationToken = default);
        Task<bool> RemoveUserSessionsAsync(string realm, string userId, CancellationToken cancellationToken = default);
        Task<bool> RemoveUserSocialLoginProviderAsync(string realm, string userId, string provider, CancellationToken cancellationToken = default);
        Task<bool> RemoveUserTotpAsync(string realm, string userId, CancellationToken cancellationToken = default);
        Task<bool> ResetUserPasswordAsync(string realm, string userId, Credentials credentials, CancellationToken cancellationToken = default);
        Task<bool> ResetUserPasswordAsync(string realm, string userId, string password, bool temporary = true, CancellationToken cancellationToken = default);
        Task<bool> RevokeUserConsentAndOfflineTokensAsync(string realm, string userId, string clientId, CancellationToken cancellationToken = default);
        Task<bool> SendUserUpdateAccountEmailAsync(string realm, string userId, IEnumerable<string> requiredActions, string clientId = null, int? lifespan = null, string redirectUri = null, CancellationToken cancellationToken = default);
        Task<ManagementPermission> SetClientAuthorizationPermissionsInitializedAsync(string realm, string clientId, ManagementPermission managementPermission, CancellationToken cancellationToken = default);
        Task<ManagementPermission> SetGroupClientAuthorizationPermissionsInitializedAsync(string realm, string groupId, ManagementPermission managementPermission, CancellationToken cancellationToken = default);
        Task<ManagementPermission> SetIdentityProviderAuthorizationPermissionsInitializedAsync(string realm, string identityProviderAlias, ManagementPermission managementPermission, CancellationToken cancellationToken = default);
        Task<bool> SetOrCreateGroupChildAsync(string realm, string groupId, Group group, CancellationToken cancellationToken = default);
        Task<ManagementPermission> SetRoleAuthorizationPermissionsInitializedAsync(string realm, string roleName, ManagementPermission managementPermission, CancellationToken cancellationToken = default);
        Task<ManagementPermission> SetRoleAuthorizationPermissionsInitializedAsync(string realm, string clientId, string roleName, ManagementPermission managementPermission, CancellationToken cancellationToken = default);
        Task<ManagementPermission> SetRoleByIdAuthorizationPermissionsInitializedAsync(string realm, string roleId, ManagementPermission managementPermission, CancellationToken cancellationToken = default);
        void SetSerializer(ISerializer serializer);
        Task<SetPasswordResponse> SetUserPasswordAsync(string realm, string userId, string password, CancellationToken cancellationToken = default);
        Task<GlobalRequestResult> TestClientClusterNodesAvailableAsync(string realm, string clientId, CancellationToken cancellationToken = default);
        Task<bool> TestLdapConnectionAsync(string realm, string action = null, string bindCredential = null, string bindDn = null, string componentId = null, string connectionTimeout = null, string connectionUrl = null, string useTruststoreSpi = null, CancellationToken cancellationToken = default);
        Task<bool> TestSmtpConnectionAsync(string realm, string config, CancellationToken cancellationToken = default);
        Task<SynchronizationResult> TriggerLdapMapperSynchronizationAsync(string realm, string storageProviderId, string mapperId, LdapMapperSyncActions direction, CancellationToken cancellationToken = default);
        Task<SynchronizationResult> TriggerUserSynchronizationAsync(string realm, string storageProviderId, UserSyncActions action, CancellationToken cancellationToken = default);
        Task<bool> UnlinkImportedUsersAsync(string realm, string storageProviderId, CancellationToken cancellationToken = default);
        Task<bool> UnregisterClientClusterNodeAsync(string realm, string clientId, CancellationToken cancellationToken = default);
        Task<bool> UpdateAuthenticationExecutionConfigurationAsync(string realm, string executionId, AuthenticatorConfig authenticatorConfig, CancellationToken cancellationToken = default);
        Task<bool> UpdateAuthenticationFlowAsync(string realm, string flowId, AuthenticationFlow authenticationFlow, CancellationToken cancellationToken = default);
        Task<bool> UpdateAuthenticationFlowExecutionsAsync(string realm, string flowAlias, AuthenticationExecutionInfo authenticationExecutionInfo, CancellationToken cancellationToken = default);
        Task<bool> UpdateAuthenticatorConfigurationAsync(string realm, string configurationId, AuthenticatorConfig authenticatorConfig, CancellationToken cancellationToken = default);
        Task<bool> UpdateAuthorizationPermissionAsync(string realm, string clientId, AuthorizationPermission permission, CancellationToken cancellationToken = default);
        Task<bool> UpdateAuthorizationScopeAsync(string realm, string resourceServerId, string scopeId, AuthorizationScope scope, CancellationToken cancellationToken = default);
        Task<bool> UpdateClientAsync(string realm, string clientId, Client client, CancellationToken cancellationToken = default);
        Task<bool> UpdateClientScopeAsync(string realm, string clientScopeId, ClientScope clientScope, CancellationToken cancellationToken = default);
        Task<bool> UpdateComponentAsync(string realm, string componentId, Component componentRepresentation, CancellationToken cancellationToken = default);
        Task<bool> UpdateDefaultClientScopeAsync(string realm, string clientId, string clientScopeId, CancellationToken cancellationToken = default);
        Task<bool> UpdateGroupAsync(string realm, string groupId, Group group, CancellationToken cancellationToken = default);
        Task<bool> UpdateIdentityProviderAsync(string realm, string identityProviderAlias, Models.IdentityProviders.IdentityProvider identityProvider, CancellationToken cancellationToken = default);
        Task<bool> UpdateIdentityProviderMapperAsync(string realm, string identityProviderAlias, string mapperId, IdentityProviderMapper identityProviderMapper, CancellationToken cancellationToken = default);
        Task<bool> UpdateOptionalClientScopeAsync(string realm, string clientId, string clientScopeId, CancellationToken cancellationToken = default);
        Task<bool> UpdateProtocolMapperAsync(string realm, string clientScopeId, string protocolMapperId, ProtocolMapper protocolMapperRepresentation, CancellationToken cancellationToken = default);
        Task<bool> UpdateRealmAsync(string realm, Realm rep, CancellationToken cancellationToken = default);
        Task<bool> UpdateRealmDefaultClientScopeAsync(string realm, string clientScopeId, CancellationToken cancellationToken = default);
        Task<bool> UpdateRealmEventsProviderConfigurationAsync(string realm, RealmEventsConfig rep, CancellationToken cancellationToken = default);
        Task<bool> UpdateRealmGroupAsync(string realm, string groupId, CancellationToken cancellationToken = default);
        Task<bool> UpdateRealmOptionalClientScopeAsync(string realm, string clientScopeId, CancellationToken cancellationToken = default);
        Task<ManagementPermission> UpdateRealmUsersManagementPermissionsAsync(string realm, ManagementPermission managementPermission, CancellationToken cancellationToken = default);
        Task<bool> UpdateRequiredActionAsync(string realm, string requiredActionAlias, RequiredActionProvider requiredActionProvider, CancellationToken cancellationToken = default);
        Task<bool> UpdateResourceAsync(string realm, string resourceServerId, string resourceId, AuthorizationResource resource, CancellationToken cancellationToken = default);
        Task<bool> UpdateRoleByIdAsync(string realm, string roleId, Role role, CancellationToken cancellationToken = default);
        Task<bool> UpdateRoleByNameAsync(string realm, string roleName, Role role, CancellationToken cancellationToken = default);
        Task<bool> UpdateRoleByNameAsync(string realm, string clientId, string roleName, Role role, CancellationToken cancellationToken = default);
        Task<bool> UpdateRolePolicyAsync(string realm, string clientId, RolePolicy policy, CancellationToken cancellationToken = default);
        Task<bool> UpdateUserAsync(string realm, string userId, User user, CancellationToken cancellationToken = default);
        Task<bool> UpdateUserGroupAsync(string realm, string userId, string groupId, Group group, CancellationToken cancellationToken = default);
        Task<Certificate> UploadCertificateWithoutPrivateKeyAsync(string realm, string clientId, string attribute, string fileName, CancellationToken cancellationToken = default);
        Task<Certificate> UploadCertificateWithPrivateKeyAsync(string realm, string clientId, string attribute, string fileName, CancellationToken cancellationToken = default);
        Task<bool> VerifyUserEmailAddressAsync(string realm, string userId, string clientId = null, string redirectUri = null, CancellationToken cancellationToken = default);
    }
}
